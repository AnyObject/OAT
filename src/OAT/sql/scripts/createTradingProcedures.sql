/*    Open Auto Trading : A fully automatic equities trading platform with machine learning capabilities    Copyright (C) 2015 AnyObject Ltd.    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>. */DELIMITER //DROP FUNCTION IF EXISTS `toTimeLong`//CREATE FUNCTION `toTimeLong`(dt DATETIME)  RETURNS BIGINT  DETERMINISTIC  RETURN UNIX_TIMESTAMP(dt) * 1000//DROP FUNCTION IF EXISTS `toTimeStamp`//CREATE FUNCTION `toTimeStamp`(timeLong BIGINT)  RETURNS DATETIME  DETERMINISTIC  RETURN FROM_UNIXTIME(FLOOR(timeLong / 1000))//DROP FUNCTION IF EXISTS `side`//CREATE FUNCTION `side`(side VARCHAR(9))  RETURNS VARCHAR(50)  DETERMINISTIC  RETURN   (CASE     WHEN side = 'BOT' THEN 1    WHEN side = 'SLD' THEN -1    ELSE  0  END)//DROP PROCEDURE IF EXISTS `getCurrentPosition`//CREATE PROCEDURE `getCurrentPosition` (conId INT, since LONG, account VARCHAR(50))  SELECT   SUM(side(m_side) * m_shares) AS position  FROM `executions`  WHERE m_conId = conId  AND exe_time_long >= since  AND m_shares > 0   AND m_acctNumber LIKE CONCAT(account, '%')//DROP PROCEDURE IF EXISTS `getCurrentValue`//CREATE PROCEDURE `getCurrentValue` (conId INT, since LONG, account VARCHAR(50))  SELECT   SUM(-side(m_side) * m_shares * m_price) AS value  FROM `executions`  WHERE m_conId = conId  AND exe_time_long >= since  AND m_shares > 0   AND m_acctNumber LIKE CONCAT(account, '%')//DROP PROCEDURE IF EXISTS `getExecutions`//CREATE PROCEDURE `getExecutions` (conId INT, since LONG, account VARCHAR(50))  SELECT * FROM `executions`  WHERE m_conId = conId  AND exe_time_long >= since  AND m_acctNumber LIKE CONCAT(account, '%')  ORDER BY exe_time_long//DROP PROCEDURE IF EXISTS `getLastFilledOrder`//CREATE PROCEDURE `getLastFilledOrder` (clientId INT, conId INT, since LONG)  SELECT * FROM `orders` LEFT JOIN `executions`  USING (`m_permId`, `m_conId`)  WHERE `m_conId` = conId  AND `exe_time_long` >= since  AND `m_status` LIKE '%Filled%'  AND `executions`.`m_clientId` = clientId  ORDER BY `exe_time_long` DESC  LIMIT 1//DROP PROCEDURE IF EXISTS `getSubmittedOrder`//CREATE PROCEDURE `getSubmittedOrder` (clientId INT, conId INT, since LONG)  SELECT * FROM `orders`  WHERE `m_conId` = conId  AND `submitted_time_long` >= since  AND `m_status` LIKE '%Submit%'  AND `m_clientId` = clientId  ORDER BY `submitted_time_long` DESC  LIMIT 1//DELIMITER ;