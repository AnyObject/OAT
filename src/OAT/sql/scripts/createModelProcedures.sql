/*    Open Auto Trading : A fully automatic equities trading platform with machine learning capabilities    Copyright (C) 2015 AnyObject Ltd.    This program is free software: you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation, either version 3 of the License, or    (at your option) any later version.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program.  If not, see <http://www.gnu.org/licenses/>. */DELIMITER //DROP FUNCTION IF EXISTS `toTimeLong`//CREATE FUNCTION `toTimeLong`(dt DATETIME)  RETURNS BIGINT  DETERMINISTIC  RETURN UNIX_TIMESTAMP(dt) * 1000//DROP FUNCTION IF EXISTS `toTimeStamp`//CREATE FUNCTION `toTimeStamp`(timeLong BIGINT)  RETURNS DATETIME  DETERMINISTIC  RETURN FROM_UNIXTIME(FLOOR(timeLong / 1000))//DROP PROCEDURE IF EXISTS `getTrainingTicks`//CREATE PROCEDURE `getTrainingTicks` (conId INT, open_long BIGINT, enter_time_long BIGINT, size INT)BEGIN  SET @sql = CONCAT(    'SELECT tick_price, tick_size FROM `data`.`ticks` ',    ' WHERE m_conId = ', conId,    ' AND tick_time_long >= ', open_long,    ' AND tick_time_long < ', enter_time_long,    ' ORDER BY tick_time_long DESC ',    ' LIMIT ', size);  PREPARE STMT FROM @sql;  EXECUTE STMT;  DROP PREPARE STMT;END //DROP PROCEDURE IF EXISTS `insertIndicator`//CREATE PROCEDURE `insertIndicator` (indicatorName VARCHAR(255), classifierName VARCHAR(255))BEGIN  SET @ci = (SELECT `id` FROM `classifiers` WHERE `class` = classifierName LIMIT 1);  INSERT IGNORE INTO `indicators`   (`class`, `classifier_id`)  VALUES(indicatorName, (SELECT @ci))  ON DUPLICATE KEY UPDATE `classifier_id` = (SELECT @ci);END //DROP PROCEDURE IF EXISTS `insertClassifier`//CREATE PROCEDURE `insertClassifier` (classifierName VARCHAR(255))  INSERT IGNORE INTO `classifiers`   (`class`)  VALUES(classifierName);//DROP PROCEDURE IF EXISTS `insertTrade`//CREATE PROCEDURE `insertTrade` (m_conId INT, enter_side TINYINT(1), enter_time_long BIGINT, enter_price DOUBLE, exit_time_long BIGINT, exit_price DOUBLE)  INSERT IGNORE INTO `trades`   (`m_conId`, `enter_side`, `enter_time_long`, `enter_price`, `exit_time_long`, `exit_price`)  VALUES(m_conId, enter_side, enter_time_long, enter_price, exit_time_long, exit_price);//DROP PROCEDURE IF EXISTS `getConIds`//CREATE PROCEDURE `getConIds` (symbol VARCHAR(45))  SELECT m_conId FROM `data`.`contracts`   WHERE m_symbol = symbol;//DROP PROCEDURE IF EXISTS `getTrades`//CREATE PROCEDURE `getTrades` (conId INT, side TINYINT(1))  SELECT * FROM `trades`   WHERE m_conId = conId  AND enter_side = side;//DROP PROCEDURE IF EXISTS `createTrainingSetTable`//CREATE PROCEDURE `createTrainingSetTable` (size INT)BEGIN  DECLARE i INT DEFAULT 0;  DROP TABLE IF EXISTS `training_set`;  SET @stat = 'CREATE TABLE `training_set` (';      WHILE i < size DO    SET @stat = CONCAT(@stat, CONCAT('`d', i, '` DOUBLE, '));    SET i = i + 1;  END WHILE;  SET @stat = CONCAT(@stat, ' `class` INT)');  PREPARE STMT FROM @stat;  EXECUTE STMT;  END //DROP PROCEDURE IF EXISTS `getTickPattern`//CREATE PROCEDURE `getTickPattern` (conId INT, enter_time BIGINT,  size INT)BEGIN  DECLARE open_time BIGINT;  DECLARE enter_price DOUBLE;  DECLARE avg_tick_size DOUBLE;  SELECT open_long FROM `data`.`trading_hours`    WHERE exchange = (SELECT `m_exchange` FROM `data`.`contracts` WHERE m_conId = conId)    AND open_long <= enter_time      AND close_long > enter_time    ORDER BY open_long DESC LIMIT 1  INTO open_time;  SELECT tick_price FROM `data`.`ticks`    WHERE m_conId = conId    AND tick_time_long <= enter_time    ORDER BY tick_time_long DESC LIMIT 1    INTO enter_price;   SELECT avg(tick_size) FROM    (SELECT (tick_size) FROM `data`.`ticks`      WHERE m_conId = conId      AND tick_time_long >= open_time        AND tick_time_long < enter_time    ) ticks  INTO avg_tick_size;     SET @stat = CONCAT(  'SELECT tick_price / ', enter_price, ' AS price, tick_size / ', avg_tick_size, ' AS size',  ' FROM `data`.`ticks` WHERE m_conId = ', conId,   ' AND `tick_time_long` >= ', open_time,  ' AND tick_time_long < ', enter_time,    ' ORDER BY tick_time_long DESC LIMIT ', size);      PREPARE STMT FROM @stat;  EXECUTE STMT;END //DROP PROCEDURE IF EXISTS `insertTickPattern`//CREATE PROCEDURE `insertTickPattern` (t TEXT)BEGIN  SET @stat = CONCAT(  'INSERT INTO `training_set` VALUES(', t, ')'  );    PREPARE STMT FROM @stat;  EXECUTE STMT;END//DELIMITER ;